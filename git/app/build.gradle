import java.util.regex.Pattern
import com.slin.version.plugin.*
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}


android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.slin.git"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        GitProperties properties = new GitProperties(rootProject, "public.properties", "local.properties")
        buildConfigField "String", "CLIENT_ID", properties.getValue("CLIENT_ID")
        buildConfigField "String", "CLIENT_SECRET", properties.getValue("CLIENT_SECRET")
        buildConfigField "String", "USER_ACCESS_TOKEN", properties.getValue("USER_ACCESS_TOKEN")
        buildConfigField "String", "DEFAULT_ACCOUNT", properties.getValue("DEFAULT_ACCOUNT")
        buildConfigField "String", "DEFAULT_PASSWORD", properties.getValue("DEFAULT_PASSWORD")

    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
        //如果使用dataBinding的话，只设置dataBinding的话不会自动生成对应的binding文件，需要编译才行，因此添加此设置
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(path: ':git:proto')

    implementation Dependencies.Slin.score
    implementation Dependencies.Slin.viewBindingExt
    implementation Dependencies.Slin.stateViewSwitcher

    implementation Dependencies.Kotlin.stdlib
    implementation Dependencies.AndroidX.appcompat
    implementation Dependencies.AndroidX.swipeRefreshLayout

    implementation Dependencies.AndroidX.material
    implementation Dependencies.AndroidX.constraintLayout
    implementation Dependencies.AndroidX.vectorDrawable
    implementation Dependencies.AndroidX.navigationFragment
    implementation Dependencies.AndroidX.navigationUi
    implementation Dependencies.AndroidX.navigationFragmentKtx
    implementation Dependencies.AndroidX.navigationUiKtx
    implementation Dependencies.AndroidX.dynamicAnimation

    implementation Dependencies.Jetpack.lifecycleExtensions
    implementation Dependencies.Jetpack.lifecycleRuntime
    //room
    implementation Dependencies.Jetpack.room
    implementation Dependencies.Jetpack.roomKtx
    kapt Dependencies.Jetpack.roomCompiler
    //paging
    implementation Dependencies.Jetpack.pagingRuntime

    implementation Dependencies.Jetpack.hilt
    kapt Dependencies.Jetpack.hiltCompiler
    implementation Dependencies.Jetpack.hiltViewModel
    kapt Dependencies.Jetpack.hiltViewModelCompiler

//    test
    testImplementation Dependencies.Test.junit
    androidTestImplementation Dependencies.Test.junit_ext
    androidTestImplementation Dependencies.Test.espresso_core


}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}


class GitProperties {

    private static def STRING_PATTERN = Pattern.compile("^\"([\\w-]*)\"")

    private Properties publicProperties
    private Properties localProperties

    GitProperties(Project project, String publicFile, String localFile) {
        publicProperties = new Properties()
        publicProperties.load(project.file(publicFile).newDataInputStream())
        localProperties = new Properties()
        localProperties.load(project.file(localFile).newDataInputStream())
    }

    String getValue(String key) {
        String publicValue = getStringValue(publicProperties, key)
        String localValue = getStringValue(localProperties, key)
        def result = or(publicValue, localValue)
        return "\"" + result + "\""
    }

    static String or(String self, String another) {
        return self == null || self.isEmpty() ? another : self
    }

    static String getStringValue(Properties properties, String key) {
        String value = properties.getProperty(key)
        if(value == null) value = "\"\""
        def matcher = STRING_PATTERN.matcher(value)
        if (!matcher.matches()) {
            throw IllegalFormatException("请输入字符串，比如：\"a123\"")
        } else {
            return matcher.group(1)
        }
    }
}