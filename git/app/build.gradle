import com.slin.version.plugin.Libs

import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}


android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.slin.git"
        minSdkVersion 24
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        GitProperties properties = new GitProperties(rootProject, "public.properties", "local.properties")
        buildConfigField "String", "CLIENT_ID", properties.getValue("CLIENT_ID")
        buildConfigField "String", "CLIENT_SECRET", properties.getValue("CLIENT_SECRET")
        buildConfigField "String", "USER_ACCESS_TOKEN", properties.getValue("USER_ACCESS_TOKEN")
        buildConfigField "String", "DEFAULT_ACCOUNT", properties.getValue("DEFAULT_ACCOUNT")
        buildConfigField "String", "DEFAULT_PASSWORD", properties.getValue("DEFAULT_PASSWORD")

    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
        //如果使用dataBinding的话，只设置dataBinding的话不会自动生成对应的binding文件，需要编译才行，因此添加此设置
        viewBinding = true
        buildConfig = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    namespace 'com.slin.git'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(path: ':git:proto')

    implementation Libs.Slin.score
    implementation Libs.Slin.viewBindingExt
    implementation Libs.Slin.stateViewSwitcher

    implementation Libs.Kotlin.stdlib
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.swipeRefreshLayout

    implementation Libs.AndroidX.material
    implementation Libs.AndroidX.constraintLayout
    implementation Libs.AndroidX.vectorDrawable
    implementation Libs.AndroidX.navigationFragment
    implementation Libs.AndroidX.navigationUi
    implementation Libs.AndroidX.navigationFragmentKtx
    implementation Libs.AndroidX.navigationUiKtx
    implementation Libs.AndroidX.dynamicAnimation

    implementation Libs.Jetpack.lifecycleRuntime
    //room
    implementation Libs.Jetpack.room
    implementation Libs.Jetpack.roomKtx
    kapt Libs.Jetpack.roomCompiler
    //paging
    implementation Libs.Jetpack.pagingRuntime

    implementation Libs.Jetpack.hilt
    kapt Libs.Jetpack.hiltCompiler

//    test
    testImplementation Libs.Test.junit
    androidTestImplementation Libs.Test.junitExt
    androidTestImplementation Libs.Test.espressoCore


}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}


class GitProperties {

    private static def STRING_PATTERN = Pattern.compile("^\"([\\w-]*)\"")

    private Properties publicProperties
    private Properties localProperties

    GitProperties(Project project, String publicFile, String localFile) {
        publicProperties = new Properties()
        publicProperties.load(project.file(publicFile).newDataInputStream())
        localProperties = new Properties()
        localProperties.load(project.file(localFile).newDataInputStream())
    }

    String getValue(String key) {
        String publicValue = getStringValue(publicProperties, key)
        String localValue = getStringValue(localProperties, key)
        def result = or(publicValue, localValue)
        return "\"" + result + "\""
    }

    static String or(String self, String another) {
        return self == null || self.isEmpty() ? another : self
    }

    static String getStringValue(Properties properties, String key) {
        String value = properties.getProperty(key)
        if(value == null) value = "\"\""
        def matcher = STRING_PATTERN.matcher(value)
        if (!matcher.matches()) {
            throw IllegalFormatException("请输入字符串，比如：\"a123\"")
        } else {
            return matcher.group(1)
        }
    }
}